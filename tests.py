__author__ = 'vladimir'

import json
import testing
from detect_remotes import Tables, Connection, Detector


class BallIRRemoteTest(testing.DBAsyncHTTPTestCase):
    # def setUp(self):
    # connect = Connection()
    #        detect = Detector(connect)
    #        self.samsung_real_power_command = Tables.CommandCode(
    #            frame=[164, 173, 20, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 21, 20, 22, 19, 22, 20, 65, 20, 65, 20, 65, 20,
    #                   22, 20, 22, 20, 21, 20, 22, 19, 22, 20, 22, 20, 65, 20, 22, 20, 22, 20, 22, 20, 22, 20, 21, 20, 21,
    #                   20, 65, 20, 22, 20, 65, 20, 65, 20, 65, 20, 65, 20, 65, 20, 65, 20, 1800, 166, 173, 20, 65, 20, 65,
    #                   20, 65, 20, 22, 20, 22, 20, 22, 20, 21, 20, 22, 19, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 22, 20,
    #                   21, 20, 21, 20, 22, 20, 65, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 65, 20, 21, 19, 65,
    #                   20, 65, 20, 65, 20, 65, 20, 65, 20, 64, 20, 1800, 166, 173, 20, 65, 20, 65, 20, 65, 20, 21, 20, 21,
    #                   20, 22, 20, 22, 20, 22, 20, 65, 20, 65, 20, 65, 20, 22, 20, 21, 20, 22, 19, 22, 20, 22, 20, 22, 20,
    #                   65, 20, 22, 20, 22, 20, 22, 20, 21, 20, 21, 20, 22, 20, 65, 20, 22, 20, 65, 20, 65, 20, 65, 20, 64,
    #                   20, 65, 20, 65, 20, 1800],
    #            frequency=38216)

    def test_ball_post_id(self):
        response = self.fetch('/ir_remote_detector/user/remotes', method="POST",
                              body='{"vendorId": "samsung", "modelId": "ubertv301","name": "my little pony"}')

        self.assertEqual(201, response.code)

    def test_ball_post_command(self):
        response = self.fetch('/ir_remote_detector/user/remotes/com', method="POST",
                              body='{"name": "my little pony", "commands": [{ "frame": [164, 173, 20, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 21, 20, 22, 19, 22, 20, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 21, 20, 22, 19, 22, 20, 22, 20, 65, 20, 22, 20, 22, 20, 22, 20, 22, 20, 21, 20, 21, 20, 65, 20, 22, 20, 65, 20, 65, 20, 65, 20, 65, 20, 65, 20, 65, 20, 1800, 166, 173, 20, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 22, 20, 21, 20, 22, 19, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 22, 20, 21, 20, 21, 20, 22, 20, 65, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 65, 20, 21, 19, 65, 20, 65, 20, 65, 20, 65, 20, 65, 20, 64, 20, 1800, 166, 173, 20, 65, 20, 65, 20, 65, 20, 21, 20, 21, 20, 22, 20, 22, 20, 22, 20, 65, 20, 65, 20, 65, 20, 22, 20, 21, 20, 22, 19, 22, 20, 22, 20, 22, 20, 65, 20, 22, 20, 22, 20, 22, 20, 21, 20, 21, 20, 22, 20, 65, 20, 22, 20, 65, 20, 65, 20, 65, 20, 64, 20, 65, 20, 65, 20, 1800], "frequency": 38216}]}')
        self.assertEqual(201, response.code)

    def test_ball_put_command(self):
        add_rec = self.fetch('/ir_remote_detector/ir_learn/record', method="POST",
                             body='{"frequency":38216, "period": 20, "command": [164, 173, 20]}')
        self.assertTrue('Location' in add_rec.headers)
        location = add_rec.headers['Location']
        response = self.fetch(location, method="PUT",
                              body='{"frequency":38216, "period":60, "command": [164, 173, 20, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 21, 20, 22, 19, 22, 20, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 21, 20, 22, 19, 22, 20, 22, 20, 65, 20, 22, 20, 22, 20, 22, 20, 22, 20, 21, 20, 21, 20, 65, 20, 22, 20, 65, 20, 65, 20, 65, 20, 65, 20, 65, 20, 65, 20, 1800, 166, 173, 20, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 22, 20, 21, 20, 22, 19, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 22, 20, 21, 20, 21, 20, 22, 20, 65, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 65, 20, 21, 19, 65, 20, 65, 20, 65, 20, 65, 20, 65, 20, 64, 20, 1800, 166, 173, 20, 65, 20, 65, 20, 65, 20, 21, 20, 21, 20, 22, 20, 22, 20, 22, 20, 65, 20, 65, 20, 65, 20, 22, 20, 21, 20, 22, 19, 22, 20, 22, 20, 22, 20, 65, 20, 22, 20, 22, 20, 22, 20, 21, 20, 21, 20, 22, 20, 65, 20, 22, 20, 65, 20, 65, 20, 65, 20, 64, 20, 65, 20, 65, 20, 1800]}')
        self.assertEqual(200, response.code)

    def test_ball_put_recognize(self):
        response = self.fetch('/ir_remote_detector/reference/tv/recognize', method="PUT",
                              body='{"name": "power", "frequency":38216, "period": None, "command": [164, 173, 20, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 21, 20, 22, 19, 22, 20, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 21, 20, 22, 19, 22, 20, 22, 20, 65, 20, 22, 20, 22, 20, 22, 20, 22, 20, 21, 20, 21, 20, 65, 20, 22, 20, 65, 20, 65, 20, 65, 20, 65, 20, 65, 20, 65, 20, 1800, 166, 173, 20, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 22, 20, 21, 20, 22, 19, 65, 20, 65, 20, 65, 20, 22, 20, 22, 20, 22, 20, 21, 20, 21, 20, 22, 20, 65, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 22, 20, 65, 20, 21, 19, 65, 20, 65, 20, 65, 20, 65, 20, 65, 20, 64, 20, 1800, 166, 173, 20, 65, 20, 65, 20, 65, 20, 21, 20, 21, 20, 22, 20, 22, 20, 22, 20, 65, 20, 65, 20, 65, 20, 22, 20, 21, 20, 22, 19, 22, 20, 22, 20, 22, 20, 65, 20, 22, 20, 22, 20, 22, 20, 21, 20, 21, 20, 22, 20, 65, 20, 22, 20, 65, 20, 65, 20, 65, 20, 64, 20, 65, 20, 65, 20, 1800]}')
        self.assertEqual(200, response.code)